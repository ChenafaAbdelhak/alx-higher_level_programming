===========================
how to use 0-add_integer.py
===========================

this module define a function that adds two integers ``add_integer(a; b=98)``


Usage
=====

``add_integer(a, b)`` return the addition of a and b (like the operator '+')


::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::

	>>> add_integer(2, -3)
	-1

::

	>>> add_integer(2.0, 3.0)
	5

::

	>>> add_integer(2.9, 3.9)
	5

::

	>>> add_integer(-2.3, -2.3)
	-4

::

	>>> add_integer(2)
	100


both arguments must be integers or float-numbers or a type exception will be raised

::

	>>> add_integer("string", 1)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(1, "string")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(1, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer("string", "also a string")
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
